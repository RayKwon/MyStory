@model MyStory.ViewModels.PostDetailViewModel
@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.CurrentUrl = Url.Action("Detail", "Post", new { Id = Model.Id }, "http");   // by specifying protocol in the last parameter, you will get absolute url instead of relative url
}
@section Style{
    <link href="@Url.Content("~/Content/Prettify/Themes/sons-of-obsidian.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/openid-selector/openid.css")" rel="stylesheet" type="text/css" />
}
<p>
    <h2 class="article-title">@Html.DisplayFor(model => model.Title)</h2>
</p>
<div>
    @Html.Raw(Model.Content)
</div>
<div style="margin-top: 30px">
    <p>
        @Facebook.LikeButton(href:@Request.Url.AbsoluteUri, buttonLayout:"button_count", showFaces:false, width:650, height:20)
    </p>
    <p>
        <i class="icon-share"></i> <b>Share with</b> @LinkShare.GetHtml(Model.Title, linkSites: new LinkShareSite[] { LinkShareSite.Twitter, LinkShareSite.Facebook, LinkShareSite.Digg, LinkShareSite.GoogleBuzz, LinkShareSite.Reddit, LinkShareSite.StumbleUpon })
    </p>
    <p>
        <i class="icon-time"></i> <b>Posted at @Html.DisplayFor(model => model.DateCreated)</b>
    </p>
    <div>
        @if (Model.Tags != null && Model.Tags.Count() > 0)
        {
            <i class="icon-tags"></i>
        }
        @foreach (var item in Model.Tags)
        {
            <a href="@Url.Action("Index", "Tag", new { TagText = @item })" class="btn btn-info btn-mini">@item</a>
        }
    </div>
    <div class="btn-group" style="margin-top: 10px; margin-bottom: 20px">
        @if (Request.IsAuthenticated)
        {
            @Html.ActionLink("Edit", "Edit", "Post", new { id = Model.Id }, new { @class = "btn" })
            <a  class="btn" data-toggle="modal" href="#modal-delete-post" onclick="openModal('@Model.Id');" >
                Delete</a>
            @Html.ActionLink("Back to List", "Index", "Home", null, new { @class = "btn" })
        }
    </div>
    
    @Html.Action("PostCommentsList", "Comment", new { PostId = Model.Id })

    <div class="well shadow">
    <div>
        <form action="@Url.Action("Authenticate", "OpenId")" method="post" id="openid_form">
        <label for="openid_identifier"><strong><i class="icon-user"></i> You can use your OpenID provider. <a href="http://openid.net/" target="_blank"">OpenID?</a></strong></label>
        <div id="openid_btns" ></div>
        <div id="openid_input_area">
            <input id="openid_identifier" name="openid_identifier" type="text" value="http://" />
            <input type="submit" value="Login" />
        </div>
        <input type="hidden" name="returnUrl" value="@ViewBag.CurrentUrl" />
        </form>    
    </div>
    <div>
        @using (Html.BeginForm("Write", "Comment", FormMethod.Post))
        {   
            @Html.ValidationSummary(true, "Post comment was unsuccessful. Please correct the errors and try again.", new { @class = "alert alert-error" })

            <div>
                @Html.TextBoxFor(model => model.CommentInput.Name, new { placeholder = "Name" })
                @Html.ValidationMessageFor(model => model.CommentInput.Name)
            </div>

            <div>
                @Html.TextBoxFor(model => model.CommentInput.Email, new { placeholder = "Email" })
                @Html.ValidationMessageFor(model => model.CommentInput.Email)
            </div>

            <div>
                @Html.TextBoxFor(model => model.CommentInput.Url, new { placeholder = "Url" })
                @Html.ValidationMessageFor(model => model.CommentInput.Url)
            </div>

            <div>
                @Html.TextAreaFor(model => model.CommentInput.Content, new { style = "WIDTH:98%;Height:250px", placeholder="Comment" })
                @Html.ValidationMessageFor(model => model.CommentInput.Content)
            </div>
            
            @Html.HiddenFor(model=>model.Id)
            @Html.HiddenFor(model=> model.CommentInput.OpenId)
            @Html.Hidden("returnUrl", (string)ViewBag.CurrentUrl)
            <div class="form-actions">
                <input type="submit" value="Post Comment" class="btn btn-primary" />
            </div>
        }
    </div>
    </div>
    

    @* Comments using facebook account
    @{
        Facebook.Initialize(ViewBag.FaceBookAppId, ViewBag.FaceBookAppSecret);
    }
    @Facebook.GetInitializationScripts()
    @Facebook.Comments(xid:@Html.Encode(@Request.Url.AbsoluteUri))*@
</div>


@Html.Partial("DeletePostPopup")
@section Script
{
    @*<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@
    <script src="@Url.Content("~/Scripts/openid-selector/openid-jquery.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/openid-selector/openid-en.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            // remove container box 
            $('#main-body').removeClass('well');
            $('#main-body').removeClass('shadow');

            openid.init('openid_identifier');

            $('pre').addClass('prettyprint linenums');
            prettyPrint();

            $('#delete-confirm').click(function () {
                $.ajax({
                    cache: false,
                    type: "POST",
                    async: false,
                    url: "/Post/Delete/" + selectedPostIdToDelete,
                    contentType: "application/json",
                    dataType: "json",
                    success: function (result) {
                        location.href = "/Home/Index";
                    },
                    error: function (request, status, error) {
                        alert(error);
                    }
                });
            });
        });

        var selectedPostIdToDelete;

        function openModal(postId) {
            this.selectedPostIdToDelete = postId;
        }
    </script>
}
